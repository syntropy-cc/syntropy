---
description: 
globs: 
alwaysApply: false
---
## Implementation Checklist for Cursor

### Scroll Experience Requirements

**Scroll Implementation:**
- [ ] Implement Intersection Observer for all scroll animations
- [ ] Use `will-change` for elements about to animate
- [ ] Apply `transform: translateZ(0)` for GPU acceleration
- [ ] Debounce scroll events to maintain 60fps
- [ ] Preload below-the-fold images with blur-up technique

**Animation Choreography:**
- [ ] Stagger animations for grouped elements
- [ ] Use CSS custom properties for timing consistency
- [ ] Implement reduced motion alternatives
- [ ] Cache animation state to prevent re-triggering
- [ ] Test on low-end devices for performance

**Section Transitions:**
- [ ] Create smooth section boundaries
- [ ] Implement parallax scrolling for depth
- [ ] Add scroll-triggered video/animation playback
- [ ] Use CSS Scroll Snap for precise control
- [ ] Build custom scroll indicators

### Component Behavior Requirements

**Interactive Elements:**
- [ ] All buttons must have hover, active, focus states
- [ ] Cards should lift on hover with shadow enhancement
- [ ] Links should have smooth underline animations
- [ ] Images should have loading placeholders
- [ ] Forms must show real-time validation feedback

**Navigation Patterns:**
- [ ] Sticky navigation with scroll-based sizing
- [ ] Smooth scroll to anchor links
- [ ] Back-to-top button after first fold
- [ ] Section progress indicators
- [ ] Mobile-friendly hamburger menu with smooth transitions

**Performance Optimizations:**
- [ ] Lazy load all images and videos
- [ ] Use Intersection Observer for triggering animations
- [ ] Implement virtual scrolling for long lists
- [ ] Optimize animation with CSS transforms only
- [ ] Bundle critical CSS inline

### Code Generation Guidelines

```typescript
// Every page component should follow this pattern
interface PageComponent {
  // Scroll management
  scrollTriggers: ScrollTrigger[];
  parallaxElements: ParallaxElement[];
  lazyLoadItems: LazyLoadItem[];
  
  // Animation orchestration
  animationSequence: AnimationStep[];
  scrollProgress: number;
  
  // Performance
  intersectionObserver: IntersectionObserver;
  animationFrame: number;
}

// Example implementation
const LandingPage: React.FC = () => {
  // Scroll-based animations
  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            entry.target.classList.add('visible');
            // Trigger specific animations based on data attributes
            const animation = entry.target.dataset.animation;
            if (animation) {
              entry.target.classList.add(animation);
            }
          }
        });
      },
      {
        threshold: [0, 0.1, 0.5, 1],
        rootMargin: '-10% 0px', // Trigger slightly before entering viewport
      }
    );
    
    // Observe all animatable elements
    document.querySelectorAll('[data-animate]').forEach((el) => {
      observer.observe(el);
    });
    
    return () => observer.disconnect();
  }, []);
  
  // Smooth scroll behavior
  useEffect(() => {
    // Enable smooth scrolling
    document.documentElement.style.scrollBehavior = 'smooth';
    
    // Parallax effect
    const handleScroll = throttle(() => {
      const scrolled = window.pageYOffset;
      const parallaxElements = document.querySelectorAll('[data-parallax]');
      
      parallaxElements.forEach((el) => {
        const speed = el.dataset.parallaxSpeed || 0.5;
        const yPos = -(scrolled * speed);
        el.style.transform = `translateY(${yPos}px)`;
      });
    }, 16); // 60fps
    
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);
  
  return (
    <div className="landing-page">
      {/* Hero Section */}
      <section className="hero-section" data-animate data-animation="fade-in-scale">
        <div className="hero-background" data-parallax data-parallax-speed="0.5">
          {/* Background elements */}
        </div>
        <div className="hero-content">
          <h1 className="hero-title" data-animate data-animation="fade-in-up" data-delay="200">
            Welcome to Syntropy
          </h1>
          <p className="hero-subtitle" data-animate data-animation="fade-in-up" data-delay="400">
            The open source ecosystem that transforms how we learn, build, and discover
          </p>
          <button className="btn btn-primary" data-animate data-animation="fade-in-up" data-delay="600">
            Get Started
          </button>
        </div>
      </section>
      
      {/* Feature Sections with alternating layouts */}
      <section className="feature-section">
        <div className="container">
          <div className="feature-showcase" data-animate>
            {/* Content reveals on scroll */}
          </div>
        </div>
      </section>
    </div>
  );
};

// Utility functions
function throttle(func: Function, limit: number) {
  let inThrottle: boolean;
  return function(this: any) {
    const args = arguments;
    const context = this;
    if (!inThrottle) {
      func.apply(context, args);
      inThrottle = true;
      setTimeout(() => inThrottle = false, limit);
    }
  }
}
```

## Final UX Principles for Cursor

When implementing any feature, always ensure:

1. **Scroll Experience**: Create a fluid, continuous narrative
2. **Progressive Reveal**: Information unfolds naturally
3. **Micro-interactions**: Every interaction has feedback
4. **Performance First**: 60fps animations always
5. **Touch Friendly**: Works perfectly on all devices
6. **Accessibility**: Everyone can use it
7. **Loading States**: Never# Syntropy UX Design Guidelines

## Project Overview
Syntropy is an integrated open-source ecosystem that combines practical learning, collaborative development, and scientific research. This document contains comprehensive user experience guidelines for creating fluid, intuitive interactions inspired by industry leaders like GitHub and Apple.

## Scroll-Driven Design Patterns

### Scroll Triggers and Animations
```typescript
interface ScrollAnimation {
  // Intersection Observer Configuration
  threshold: number[]; // [0, 0.1, 0.25, 0.5, 0.75, 1]
  rootMargin: string; // '-10% 0px' for early trigger
  
  // Animation Types
  animations: {
    fadeInUp: {
      initial: { opacity: 0, transform: 'translateY(40px)' };
      final: { opacity: 1, transform: 'translateY(0)' };
      duration: 800;
      easing: 'cubic-bezier(0.4, 0, 0.2, 1)';
    };
    scaleIn: {
      initial: { opacity: 0, transform: 'scale(0.9)' };
      final: { opacity: 1, transform: 'scale(1)' };
      duration: 600;
      delay: 'stagger(100)'; // Stagger children
    };
    slideInLeft: {
      initial: { opacity: 0, transform: 'translateX(-60px)' };
      final: { opacity: 1, transform: 'translateX(0)' };
      duration: 800;
    };
    parallax: {
      speed: 0.5; // Relative to scroll speed
      direction: 'vertical' | 'horizontal';
      bounds: 'viewport'; // Limit to viewport
    };
  };
}
```

### Content Choreography
```typescript
interface ContentChoreography {
  sequence: [
    { element: 'hero-title', animation: 'fadeInUp', delay: 0 },
    { element: 'hero-subtitle', animation: 'fadeInUp', delay: 200 },
    { element: 'hero-cta', animation: 'scaleIn', delay: 400 },
    { element: 'hero-visual', animation: 'parallax', continuous: true }
  ];
  
  scrollVelocity: {
    smoothing: 0.1; // Lerp factor
    inertia: true; // Continue after scroll stops
    bounce: false; // No iOS-style bounce
  };
}
```

### Section Transitions
```typescript
interface SectionTransition {
  type: 'morph' | 'fade' | 'slide' | 'reveal';
  
  morph: {
    // Elements transform into next section
    preserveElements: string[]; // CSS selectors
    duration: 1000;
    morphPath: 'cubic-bezier(0.7, 0, 0.3, 1)';
  };
  
  reveal: {
    // Next section revealed behind current
    maskType: 'circle' | 'split' | 'slide';
    triggerPoint: 0.3; // 30% scroll
    sticky: true; // Current section sticks during reveal
  };
}
```

## Landing Page Flow Architecture

### Hero to Feature Flow
```typescript
interface LandingPageFlow {
  sections: [
    {
      name: 'hero';
      height: '100vh';
      scroll: 'full-bleed';
      exit: 'parallax-up';
    },
    {
      name: 'value-proposition';
      height: 'auto';
      entry: 'fade-in-up';
      background: 'gradient-mesh';
    },
    {
      name: 'app-showcase';
      height: 'auto';
      layout: 'alternating-sides';
      scroll: 'reveal-on-scroll';
      interaction: 'hover-to-explore';
    },
    {
      name: 'metrics';
      height: 'auto';
      animation: 'count-up-on-view';
      parallax: 'subtle-float';
    },
    {
      name: 'testimonials';
      height: 'auto';
      carousel: 'auto-play-on-view';
      interaction: 'pause-on-hover';
    },
    {
      name: 'cta-final';
      height: '60vh';
      emphasis: 'high-contrast';
      animation: 'pulse-glow';
    }
  ];
  
  scrollBehavior: {
    smoothness: 'native'; // Use CSS scroll-behavior
    snapPoints: 'optional'; // Snap to sections on light scroll
    parallaxLayers: 3; // Background, midground, foreground
    hideNavOnScroll: false; // Keep nav visible
    progressIndicator: true; // Show scroll progress
  };
}
```

### Micro-Interactions Map
```typescript
interface MicroInteractions {
  hover: {
    cards: 'lift-and-glow';
    buttons: 'fill-and-scale';
    links: 'underline-draw';
    images: 'zoom-and-dim';
  };
  
  click: {
    feedback: 'ripple-effect';
    duration: 300;
    preventDoubleClick: true;
  };
  
  scroll: {
    navBar: 'shrink-on-scroll';
    backToTop: 'show-after-fold';
    sectionIndicators: 'highlight-current';
    imageLoading: 'lazy-with-blur-up';
  };
  
  form: {
    inputFocus: 'glow-and-label-float';
    validation: 'inline-with-shake';
    submit: 'progress-then-success';
  };
}
```

## Information Architecture

### Navigation Hierarchy

```
Root Navigation
├── Learn
│   ├── Browse Courses
│   │   ├── By Category
│   │   ├── By Skill Level
│   │   └── By Duration
│   ├── My Learning Path
│   │   ├── Active Courses
│   │   ├── Completed Courses
│   │   └── Recommended Next
│   ├── Certificates
│   └── Community Forum
├── Projects
│   ├── Discover
│   │   ├── Trending
│   │   ├── Good First Issues
│   │   └── By Technology
│   ├── My Projects
│   ├── Contributions
│   └── Funding Opportunities
├── Labs
│   ├── Research Areas
│   │   ├── By Discipline
│   │   ├── By Institution
│   │   └── Open Positions
│   ├── Active Studies
│   ├── Publications
│   └── Peer Review Queue
└── Portfolio
    ├── Public Profile
    ├── Achievements
    ├── Activity Timeline
    └── Export Options
```

### Content Organization Principles

**Card-Based Layout:**
- Consistent information hierarchy
- Scannable at a glance
- Progressive information reveal on hover/click
- Visual distinction between content types

**Filtering and Sorting:**
```typescript
interface FilterSystem {
  instant: boolean; // Real-time results
  multiSelect: boolean; // Multiple filter combinations
  savedFilters: boolean; // User can save filter sets
  smartSuggestions: boolean; // AI-powered filter recommendations
}

const filterBehavior: FilterSystem = {
  instant: true,
  multiSelect: true,
  savedFilters: true,
  smartSuggestions: true
};
```

## User Flows

### Learn Platform User Flow

```mermaid
graph TD
    A[User Enters Learn] --> B{First Time?}
    B -->|Yes| C[Interest Survey]
    B -->|No| D[Personalized Dashboard]
    C --> E[Course Recommendations]
    D --> E
    E --> F[Course Selection]
    F --> G[Course Overview]
    G --> H{Enroll?}
    H -->|Yes| I[Start Learning]
    H -->|No| E
    I --> J[Complete Lessons]
    J --> K[Build Project]
    K --> L[Submit Project]
    L --> M[Receive Feedback]
    M --> N[Certificate + Next Steps]
    N --> O{Continue Learning?}
    O -->|Yes| E
    O -->|No| P[Transition to Projects]
```

### Projects Platform User Flow

```mermaid
graph TD
    A[User Enters Projects] --> B{Intent?}
    B -->|Contribute| C[Browse Projects]
    B -->|Create| D[Project Wizard]
    C --> E[Filter by Skills]
    E --> F[Find Good First Issue]
    F --> G[One-Click Dev Environment]
    G --> H[Make Contribution]
    H --> I[Submit PR]
    I --> J[Get Feedback]
    J --> K[Contribution Merged]
    K --> L[Update Portfolio]
    D --> M[Choose Template]
    M --> N[Configure Project]
    N --> O[Auto-Setup Repository]
    O --> P[Invite Collaborators]
    P --> Q[Begin Development]
```

### Labs Platform User Flow

```mermaid
graph TD
    A[User Enters Labs] --> B{Research Experience?}
    B -->|New| C[Browse Open Projects]
    B -->|Experienced| D[My Research Dashboard]
    C --> E[Apply to Project]
    E --> F[Onboarding Process]
    F --> G[Assign First Task]
    D --> G
    G --> H[Conduct Research]
    H --> I[Log Progress]
    I --> J[Collaborate with Team]
    J --> K[Submit Findings]
    K --> L[Peer Review]
    L --> M{Approved?}
    M -->|Yes| N[Publish]
    M -->|No| O[Revise]
    O --> K
    N --> P[Update Portfolio]
```

## Interaction Patterns

### Form Design Principles

**Validation Strategy:**
```typescript
interface ValidationRules {
  timing: 'inline' | 'on-blur' | 'on-submit';
  showSuccess: boolean;
  errorPlacement: 'below' | 'tooltip' | 'summary';
  preventSubmitOnError: boolean;
}

const formValidation: ValidationRules = {
  timing: 'on-blur', // Validate when user leaves field
  showSuccess: true, // Positive reinforcement
  errorPlacement: 'below', // Clear error visibility
  preventSubmitOnError: true // Prevent frustration
};
```

**Auto-Save Implementation:**
```typescript
interface AutoSaveConfig {
  enabled: boolean;
  interval: number; // milliseconds
  indicator: 'text' | 'icon' | 'progress';
  conflictResolution: 'last-write' | 'merge' | 'prompt';
}

const autoSave: AutoSaveConfig = {
  enabled: true,
  interval: 30000, // 30 seconds
  indicator: 'text', // "Saved" message
  conflictResolution: 'merge'
};
```

### Feedback Mechanisms

**Response Time Guidelines:**
- **0-100ms**: Instant (perceived as immediate)
- **100-300ms**: Fast (no loading indicator needed)
- **300-1000ms**: Loading indicator required
- **1000ms+**: Progress indicator + ability to cancel

**Feedback Types:**
```typescript
interface FeedbackSystem {
  success: {
    duration: 3000; // ms
    position: 'top-right';
    style: 'toast';
    dismissible: true;
  };
  error: {
    duration: 0; // Requires manual dismissal
    position: 'inline';
    style: 'banner';
    actionable: true; // Include fix suggestions
  };
  loading: {
    threshold: 300; // ms before showing
    type: 'skeleton' | 'spinner' | 'progress';
    message: boolean;
  };
}
```

### Navigation Patterns

**Breadcrumb System:**
```typescript
interface Breadcrumb {
  label: string;
  path: string;
  icon?: string;
  dropdownItems?: BreadcrumbItem[];
}

// Example: Learn > Web Development > React Course > Module 3
const breadcrumbs: Breadcrumb[] = [
  { label: 'Learn', path: '/learn', icon: 'book' },
  { label: 'Web Development', path: '/learn/web-dev', dropdownItems: [...] },
  { label: 'React Course', path: '/learn/web-dev/react' },
  { label: 'Module 3', path: '/learn/web-dev/react/module-3' }
];
```

## Personalization Strategy

### User Segmentation

```typescript
interface UserSegment {
  type: 'learner' | 'contributor' | 'researcher' | 'mentor';
  characteristics: string[];
  uiAdaptations: string[];
  contentPriority: string[];
}

const segments: Record<string, UserSegment> = {
  learner: {
    type: 'learner',
    characteristics: ['seeks_knowledge', 'needs_guidance', 'values_structure'],
    uiAdaptations: ['show_progress_bars', 'highlight_prerequisites', 'guided_tours'],
    contentPriority: ['tutorials', 'documentation', 'community_help']
  },
  contributor: {
    type: 'contributor',
    characteristics: ['action_oriented', 'collaborative', 'impact_driven'],
    uiAdaptations: ['quick_actions', 'contribution_stats', 'project_discovery'],
    contentPriority: ['open_issues', 'project_updates', 'collaboration_tools']
  },
  researcher: {
    type: 'researcher',
    characteristics: ['data_focused', 'methodical', 'publication_oriented'],
    uiAdaptations: ['data_tools', 'citation_manager', 'version_control'],
    contentPriority: ['datasets', 'publications', 'peer_reviews']
  },
  mentor: {
    type: 'mentor',
    characteristics: ['experienced', 'helpful', 'community_focused'],
    uiAdaptations: ['mentee_dashboard', 'content_creation', 'impact_metrics'],
    contentPriority: ['student_progress', 'course_analytics', 'community_needs']
  }
};
```

### Adaptive Interface Logic

```typescript
interface AdaptiveUI {
  complexity: 'simple' | 'standard' | 'advanced';
  features: {
    shortcuts: boolean;
    bulkActions: boolean;
    automation: boolean;
    analytics: boolean;
  };
  layout: {
    density: 'comfortable' | 'compact';
    sidebar: 'expanded' | 'collapsed' | 'hidden';
    toolbars: 'visible' | 'auto-hide';
  };
}

function adaptInterface(user: User): AdaptiveUI {
  const expertise = calculateExpertiseLevel(user);
  const preferences = getUserPreferences(user);
  
  return {
    complexity: expertise.level,
    features: {
      shortcuts: expertise.level !== 'simple',
      bulkActions: expertise.level === 'advanced',
      automation: user.segment === 'contributor' || user.segment === 'researcher',
      analytics: user.segment === 'mentor' || expertise.level === 'advanced'
    },
    layout: {
      density: preferences.density || 'comfortable',
      sidebar: expertise.level === 'simple' ? 'expanded' : 'collapsed',
      toolbars: expertise.level === 'advanced' ? 'auto-hide' : 'visible'
    }
  };
}
```

## Gamification Psychology

### Motivation Framework

**Self-Determination Theory Implementation:**
```typescript
interface MotivationDrivers {
  autonomy: {
    elements: ['choice_of_path', 'custom_goals', 'flexible_deadlines'];
    implementation: ['multiple_solutions', 'open_ended_projects', 'self_pacing'];
  };
  mastery: {
    elements: ['skill_progression', 'challenges', 'feedback'];
    implementation: ['level_system', 'achievement_badges', 'progress_tracking'];
  };
  purpose: {
    elements: ['impact_visibility', 'community_connection', 'real_world_application'];
    implementation: ['contribution_stats', 'success_stories', 'project_outcomes'];
  };
}
```

### Reward Schedule

```typescript
interface RewardSystem {
  immediate: {
    triggers: ['task_complete', 'correct_answer', 'contribution_submitted'];
    rewards: ['points', 'animation', 'progress_update'];
    frequency: 'every_occurrence';
  };
  short_term: {
    triggers: ['daily_streak', 'module_complete', 'first_contribution'];
    rewards: ['badges', 'unlocks', 'certificates'];
    frequency: 'daily_to_weekly';
  };
  long_term: {
    triggers: ['course_complete', 'project_launch', 'research_published'];
    rewards: ['certificates', 'portfolio_items', 'reputation'];
    frequency: 'weekly_to_monthly';
  };
  surprise: {
    triggers: ['milestone_reached', 'community_recognition', 'exceptional_work'];
    rewards: ['special_badges', 'features', 'opportunities'];
    frequency: 'variable_ratio';
  };
}
```

### Progress Visualization

```typescript
interface ProgressSystem {
  types: {
    linear: 'progress_bar'; // For sequential content
    branching: 'skill_tree'; // For interconnected skills
    circular: 'radar_chart'; // For multi-dimensional progress
    temporal: 'timeline'; // For time-based achievements
  };
  features: {
    milestones: boolean; // Clear goals
    comparison: boolean; // Compare with peers (optional)
    prediction: boolean; // Estimated completion time
    celebration: boolean; // Achievement animations
  };
}
```

## Performance Psychology

### Perceived Performance Optimization

**Loading Strategy:**
```typescript
interface LoadingStrategy {
  skeleton: {
    showAfter: 100; // ms
    animate: true;
    matchLayout: true;
  };
  progressive: {
    loadCritical: 'immediately';
    loadSecondary: 'after_critical';
    loadNonEssential: 'on_demand';
  };
  optimistic: {
    updateUI: 'before_server_response';
    rollback: 'on_error';
    indicate: 'subtle_confirmation';
  };
}
```

**Transition Design:**
```typescript
interface TransitionRules {
  pageChange: {
    type: 'fade' | 'slide' | 'morph';
    duration: 300; // ms
    easing: 'ease-out';
  };
  microInteraction: {
    hover: { scale: 1.02, duration: 200 };
    click: { scale: 0.98, duration: 100 };
    focus: { glow: true, duration: 200 };
  };
  stateChange: {
    showDiff: boolean; // Highlight what changed
    smoothTransition: boolean;
    maintainContext: boolean; // Keep user oriented
  };
}
```

## Error Prevention and Recovery

### Proactive Error Prevention

```typescript
interface ErrorPrevention {
  inputValidation: {
    realTime: boolean;
    suggestions: boolean;
    formatHints: boolean;
    smartDefaults: boolean;
  };
  confirmations: {
    destructiveOnly: true; // Only for data loss
    showConsequences: true; // What will happen
    offerAlternatives: true; // Safer options
    allowUndo: true; // Post-action reversal
  };
  constraints: {
    enforceInUI: true; // Disable invalid options
    explainLimitations: true; // Why something is disabled
    suggestWorkarounds: true; // Alternative approaches
  };
}
```

### Error Recovery Flow

```typescript
interface ErrorRecovery {
  detection: {
    automatic: boolean;
    userReported: boolean;
    monitoring: boolean;
  };
  communication: {
    language: 'plain'; // No technical jargon
    tone: 'helpful'; // Not blame
    specificity: 'high'; // What went wrong
  };
  resolution: {
    automated: string[]; // Auto-fix options
    guided: string[]; // Step-by-step fixes
    support: string[]; // Help channels
  };
  prevention: {
    learn: boolean; // System learns from errors
    suggest: boolean; // Proactive suggestions
    adapt: boolean; // UI adapts to prevent repeat
  };
}
```

## Mobile Experience

### Touch Optimization

```typescript
interface TouchDesign {
  targets: {
    minimum: 44; // pixels
    preferred: 48; // pixels
    spacing: 8; // pixels between targets
  };
  gestures: {
    swipe: ['navigate', 'dismiss', 'reveal'];
    pinch: ['zoom', 'expand', 'collapse'];
    longPress: ['options', 'preview', 'select'];
    doubleTap: ['like', 'zoom', 'select'];
  };
  feedback: {
    haptic: boolean; // Device vibration
    visual: boolean; // Touch ripple
    audio: boolean; // Subtle sounds
  };
}
```

### Responsive Behavior

```typescript
interface ResponsiveStrategy {
  breakpoints: {
    mobile: { max: 768, layout: 'single-column' };
    tablet: { min: 769, max: 1024, layout: 'adaptive' };
    desktop: { min: 1025, layout: 'multi-column' };
  };
  adaptation: {
    navigation: {
      mobile: 'bottom-tabs';
      tablet: 'sidebar-collapsible';
      desktop: 'sidebar-expanded';
    };
    content: {
      mobile: 'cards-stacked';
      tablet: 'cards-grid-2';
      desktop: 'cards-grid-dynamic';
    };
    interactions: {
      mobile: 'touch-optimized';
      tablet: 'hybrid';
      desktop: 'hover-enabled';
    };
  };
}
```

## Accessibility Beyond Compliance

### Inclusive Design Principles

```typescript
interface InclusiveDesign {
  cognitive: {
    clearLanguage: boolean;
    consistentPatterns: boolean;
    reducedCognitiveLoad: boolean;
    multipleRepresentations: boolean; // Visual + text
  };
  physical: {
    keyboardNavigation: boolean;
    voiceControl: boolean;
    customizableTargets: boolean;
    timeoutExtensions: boolean;
  };
  sensory: {
    altText: boolean;
    captions: boolean;
    audioDescriptions: boolean;
    highContrast: boolean;
  };
  situational: {
    offlineCapability: boolean;
    lowBandwidth: boolean;
    brightLight: boolean; // Outdoor readability
    oneHanded: boolean; // Mobile use
  };
}
```

### Assistive Technology Support

```typescript
interface AssistiveTech {
  screenReaders: {
    landmarks: boolean;
    headingStructure: boolean;
    liveRegions: boolean;
    semanticHTML: boolean;
  };
  keyboardUsers: {
    skipLinks: boolean;
    focusManagement: boolean;
    shortcutKeys: boolean;
    visibleFocus: boolean;
  };
  motorImpairments: {
    largeTargets: boolean;
    clickLockMode: boolean;
    dwellClicking: boolean;
    simplifiedGestures: boolean;
  };
}
```

## Metrics and Analytics

### Engagement Tracking

```typescript
interface EngagementMetrics {
  behavioral: {
    timeOnTask: number;
    completionRate: number;
    returnFrequency: number;
    featureAdoption: string[];
  };
  emotional: {
    satisfactionScore: number; // 1-10
    frustrationEvents: number;
    delightMoments: number;
    recommendationLikelihood: number; // NPS
  };
  performance: {
    taskEfficiency: number; // Time to complete
    errorRate: number;
    helpUsage: number;
    learningCurve: number; // Time to proficiency
  };
}
```

### Success Metrics

```typescript
interface SuccessIndicators {
  learn: {
    coursesCompleted: number;
    skillsAcquired: string[];
    projectsBuilt: number;
    communityEngagement: number;
  };
  projects: {
    contributionsMerged: number;
    projectsCreated: number;
    collaboratorsEngaged: number;
    impactScore: number;
  };
  labs: {
    researchCompleted: number;
    papersPublished: number;
    citationsReceived: number;
    peerReviewsCompleted: number;
  };
  portfolio: {
    profileViews: number;
    opportunitiesReceived: number;
    endorsements: number;
    exportsGenerated: number;
  };
}
```

## Implementation Checklist for Cursor

### UX Requirements Checklist

**User Flow Implementation:**
- [ ] Map all user journeys from entry to goal completion
- [ ] Identify and remove friction points
- [ ] Implement escape hatches at every step
- [ ] Add progress indicators for multi-step processes
- [ ] Enable deep linking to any meaningful state

**Feedback and Communication:**
- [ ] Implement loading states for all async operations
- [ ] Add success confirmations for user actions
- [ ] Provide clear, actionable error messages
- [ ] Include contextual help and tooltips
- [ ] Show progress and achievements

**Personalization:**
- [ ] Detect user expertise level
- [ ] Adapt UI complexity accordingly
- [ ] Remember user preferences
- [ ] Provide smart defaults
- [ ] Offer customization options

**Performance:**
- [ ] Implement optimistic UI updates
- [ ] Add skeleton screens for loading
- [ ] Minimize time to first interaction
- [ ] Preload likely next actions
- [ ] Cache frequently accessed data

**Accessibility:**
- [ ] Ensure keyboard navigation works
- [ ] Add proper ARIA labels
- [ ] Test with screen readers
- [ ] Provide sufficient color contrast
- [ ] Include focus indicators

### Code Generation Guidelines

```typescript
// Every interactive component should follow this pattern
interface InteractiveComponent {
  // State management
  loading: boolean;
  error: Error | null;
  disabled: boolean;
  
  // User feedback
  onSuccess: (message: string) => void;
  onError: (error: Error) => void;
  
  // Analytics
  trackEvent: (event: string, data?: any) => void;
  
  // Accessibility
  ariaLabel: string;
  ariaDescribedBy?: string;
  role?: string;
  
  // Responsive
  mobileVariant?: boolean;
  touchOptimized?: boolean;
}

// Example implementation
const Button: React.FC<InteractiveComponent> = ({
  loading,
  error,
  disabled,
  onSuccess,
  onError,
  trackEvent,
  ariaLabel,
  children
}) => {
  const handleClick = async () => {
    trackEvent('button_clicked');
    try {
      // Optimistic UI update
      setLoading(true);
      await performAction();
      onSuccess('Action completed successfully');
    } catch (err) {
      onError(err);
      // Rollback optimistic update
    } finally {
      setLoading(false);
    }
  };
  
  return (
    <button
      onClick={handleClick}
      disabled={disabled || loading}
      aria-label={ariaLabel}
      aria-busy={loading}
    >
      {loading ? <Spinner /> : children}
    </button>
  );
};
```

## Final UX Principles for Cursor

When implementing any feature, always consider:

1. **User Intent**: What is the user trying to accomplish?
2. **Context**: Where is the user coming from and going to?
3. **Cognitive Load**: How can we make this simpler?
4. **Feedback**: How will the user know what happened?
5. **Recovery**: What if something goes wrong?
6. **Delight**: How can we exceed expectations?
7. **Accessibility**: Can everyone use this?
8. **Performance**: Does it feel fast?
9. **Mobile**: Does it work on small screens?
10. **Consistency**: Does it match the rest of the system?